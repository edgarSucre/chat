// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/edgarSucre/chat/internal/usecase (interfaces: Secure)

// Package mockhash is a generated GoMock package.
package mockhash

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecure is a mock of Secure interface.
type MockSecure struct {
	ctrl     *gomock.Controller
	recorder *MockSecureMockRecorder
}

// MockSecureMockRecorder is the mock recorder for MockSecure.
type MockSecureMockRecorder struct {
	mock *MockSecure
}

// NewMockSecure creates a new mock instance.
func NewMockSecure(ctrl *gomock.Controller) *MockSecure {
	mock := &MockSecure{ctrl: ctrl}
	mock.recorder = &MockSecureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecure) EXPECT() *MockSecureMockRecorder {
	return m.recorder
}

// IsPasswordValid mocks base method.
func (m *MockSecure) IsPasswordValid(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPasswordValid", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPasswordValid indicates an expected call of IsPasswordValid.
func (mr *MockSecureMockRecorder) IsPasswordValid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPasswordValid", reflect.TypeOf((*MockSecure)(nil).IsPasswordValid), arg0, arg1)
}

// SecurePassword mocks base method.
func (m *MockSecure) SecurePassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurePassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecurePassword indicates an expected call of SecurePassword.
func (mr *MockSecureMockRecorder) SecurePassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurePassword", reflect.TypeOf((*MockSecure)(nil).SecurePassword), arg0)
}
